stages:
- check
- test
- deploy

pre-commit:
  stage: check
  image: python:3
  before_script:
  - pip install "pre-commit==2.13.0"
  script:
  - TMP_MSG_FILE="$(mktemp)"
  - git log -1 --pretty=%B > "${TMP_MSG_FILE}"
  - pre-commit run --all-files --color=always --hook-stage commit &&
    pre-commit run --all-files --color=always --hook-stage commit-msg --commit-msg-filename "${TMP_MSG_FILE}" &&
    pre-commit run --all-files --color=always --hook-stage post-commit || {
      >&2 echo "pre-commit checks failed. Please consider installing pre-commit";
      >&2 echo "hooks in your local Git clone by running \`make git-hooks-install\`.";
      exit 1;
    }

test:linux:
  stage: test
  image: python:3
  script:
  - pip install .
  - hadolint-get --hadolint-version latest -- --version

test:macos:
  stage: test
  image: macos:catalina-xcode-python3
  tags:
  - libvirt
  before_script:
  - PYTHON_VERSION="$(python3 -c 'import sys; print("{}.{}".format(sys.version_info.major, sys.version_info.minor))')"
  - sudo -H python3 -m pip install wheel
  - sudo -H /Applications/Python\ ${PYTHON_VERSION}/Install\ Certificates.command
  script:
  - sudo -H python3 -m pip install .
  - /Library/Frameworks/Python.framework/Versions/${PYTHON_VERSION}/bin/hadolint-get
      --hadolint-version latest -- --version

test:windows:
  stage: test
  image: windows:10-python3
  tags:
  - libvirt
  before_script:
  - PYTHON_VERSION="$(
      vcvars_cmd python -c 'import sys; print("{}{}".format(sys.version_info.major, sys.version_info.minor))'
    )"
  - vcvars_cmd python -m pip install wheel
  script:
  - vcvars_cmd python -m pip install .
  - /c/Program\ Files/Python${PYTHON_VERSION}/Scripts/hadolint-get.exe --hadolint-version latest -- --version

deploy-to-github:
  stage: deploy
  image: iffregistry.fz-juelich.de/docker-images/gr-build-images/deploy
  variables:
    GIT_STRATEGY: none
  only:
  - master@imeyer/hadolint-get
  - develop@imeyer/hadolint-get
  - tags@imeyer/hadolint-get
  script:
  - mkdir --mode=700 ~/.ssh/
  - (umask 0377 && echo "${GITHUB_DEPLOY_KEY}" > ~/.ssh/id_rsa
                && echo "github.com ${GITHUB_HOST_KEY}" >> ~/.ssh/known_hosts)
  - git clone --mirror "${CI_REPOSITORY_URL}" "${CI_PROJECT_NAME}_mirror"
  - cd "${CI_PROJECT_NAME}_mirror";
    git push --mirror "git@github.com:IngoMeyer441/${CI_PROJECT_NAME}.git";
    cd ..
